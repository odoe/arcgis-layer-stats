import{bq as _,f,aN as g,br as w,r as p,ao as u,ah as b,bs as S,bt as T,bu as $,bv as L,bw as I,s as k,bx as x,L as y,aZ as D,_ as v,F as a,H as o,by as E,bz as V,bA as O,I as P,bB as j}from"./index.e3323316.js";import{s as A}from"./ArcGISCachedService.cd60e3f0.js";import"./TilemapCache.0c48a1f9.js";import"./TileInfo.96cbadb7.js";import"./aaBoundingRect.5a756f30.js";import"./byteSizeEstimations.0938bf46.js";class M{constructor(e,t,i,l,h={}){this._mainMethod=t,this._transferLists=i,this._listeners=[],this._promise=_(e,{...h,schedule:l}).then(d=>{if(this._thread===void 0){this._thread=d,this._promise=null,h.hasInitialize&&this.broadcast({},"initialize");for(const n of this._listeners)this._connectListener(n)}else d.close()}),this._promise.catch(d=>f.getLogger("esri.core.workers.WorkerHandle").error(`Failed to initialize ${e} worker: ${d}`))}on(e,t){const i={removed:!1,eventName:e,callback:t,threadHandle:null};return this._listeners.push(i),this._connectListener(i),g(()=>{i.removed=!0,w(this._listeners,i),this._thread&&p(i.threadHandle)&&i.threadHandle.remove()})}destroy(){this._thread&&(this._thread.close(),this._thread=null),this._promise=null}invoke(e,t){return this.invokeMethod(this._mainMethod,e,t)}invokeMethod(e,t,i){if(this._thread){const l=this._transferLists[e],h=l?l(t):[];return this._thread.invoke(e,t,{transferList:h,signal:i})}return this._promise?this._promise.then(()=>(u(i),this.invokeMethod(e,t,i))):Promise.reject(null)}broadcast(e,t){return this._thread?Promise.all(this._thread.broadcast(t,e)).then(()=>{}):this._promise?this._promise.then(()=>this.broadcast(e,t)):Promise.reject()}get promise(){return this._promise}_connectListener(e){this._thread&&this._thread.on(e.eventName,e.callback).then(t=>{e.removed||(e.threadHandle=t)})}}class m extends M{constructor(e=null){super("LercWorker","_decode",{_decode:t=>[t.buffer]},e,{strategy:"dedicated"}),this.schedule=e,this.ref=0}decode(e,t,i){return e&&e.byteLength!==0?this.invoke({buffer:e,options:t},i):Promise.resolve(null)}release(){--this.ref<=0&&(c.forEach((e,t)=>{e===this&&c.delete(t)}),this.destroy())}}const c=new Map;function N(r=null){let e=c.get(b(r));return e||(p(r)?(e=new m(t=>r.schedule(t)),c.set(r,e)):(e=new m,c.set(null,e))),++e.ref,e}let s=class extends A(S(T($(L(j))))){constructor(...r){super(...r),this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=N()}normalizeCtorArgs(r,e){return typeof r=="string"?{url:r,...e}:r}destroy(){this._lercDecoder=I(this._lercDecoder)}readVersion(r,e){let t=e.currentVersion;return t||(t=9.3),t}load(r){const e=p(r)?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{for(let i=0;i<t.typeKeywords.length;i++)if(t.typeKeywords[i].toLowerCase()==="elevation 3d layer")return!0;throw new k("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},r).catch(x).then(()=>this._fetchImageService(e))),Promise.resolve(this)}fetchTile(r,e,t,i){const l=p((i=i||{signal:null}).signal)?i.signal:i.signal=new AbortController().signal,h={responseType:"array-buffer",signal:l},d={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(r,e,t,i)).then(()=>y(this.getTileUrl(r,e,t),h)).then(n=>this._lercDecoder.decode(n.data,d,l)).then(n=>({values:n.pixelData,width:n.width,height:n.height,maxZError:n.fileInfo.maxZError,noDataValue:n.noDataValue,minValue:n.minValue,maxValue:n.maxValue}))}getTileUrl(r,e,t){const i=!this.tilemapCache&&this.supportsBlankTile,l=D({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${r}/${e}/${t}${l?"?"+l:""}`}async queryElevation(r,e){const{ElevationQuery:t}=await v(()=>import("./ElevationQuery.25a6785f.js"),["assets/ElevationQuery.25a6785f.js","assets/index.e3323316.js","assets/index.31c04169.css","assets/projection.a8a5390b.js","assets/aaBoundingRect.5a756f30.js","assets/TileInfo.96cbadb7.js"]);return u(e),new t().query(this,r,e)}async createElevationSampler(r,e){const{ElevationQuery:t}=await v(()=>import("./ElevationQuery.25a6785f.js"),["assets/ElevationQuery.25a6785f.js","assets/index.e3323316.js","assets/index.31c04169.css","assets/projection.a8a5390b.js","assets/aaBoundingRect.5a756f30.js","assets/TileInfo.96cbadb7.js"]);return u(e),new t().createSampler(this,r,e)}_fetchTileAvailability(r,e,t,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(r,e,t,i):Promise.resolve("unknown")}async _fetchImageService(r){if(this.sourceJSON)return this.sourceJSON;const e={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:r},t=await y(this.parsedUrl.path,e);t.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile.__isDefault__}};a([o({json:{read:{source:"copyrightText"}}})],s.prototype,"copyright",void 0),a([o({readOnly:!0,type:V})],s.prototype,"heightModelInfo",void 0),a([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],s.prototype,"path",void 0),a([o({type:["show","hide"]})],s.prototype,"listMode",void 0),a([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],s.prototype,"minScale",void 0),a([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],s.prototype,"maxScale",void 0),a([o({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],s.prototype,"opacity",void 0),a([o({type:["ArcGISTiledElevationServiceLayer"]})],s.prototype,"operationalLayerType",void 0),a([o()],s.prototype,"sourceJSON",void 0),a([o({json:{read:!1},value:"elevation",readOnly:!0})],s.prototype,"type",void 0),a([o(O)],s.prototype,"url",void 0),a([o()],s.prototype,"version",void 0),a([E("version",["currentVersion"])],s.prototype,"readVersion",null),s=a([P("esri.layers.ElevationLayer")],s),s.prototype.fetchTile.__isDefault__=!0;const J=s;export{J as default};
