import{dB as g,dC as p,dA as y,cg as w,dD as I,ai as f,t as h,_}from"./index.a113d2e4.js";class b{constructor(){this.code=null,this.description=null}}class v{constructor(t){this.error=new b,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new v(e)}class q{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function j(e){return new q(e)}const a=new Set;function A(e,t,i,m=!1,u){a.clear();for(const r in i){const n=e.get(r);if(!n)continue;const l=i[r],s=P(n,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:l,sanitizedValue:s}}),a.add(n.name),n&&(m||n.editable)){const c=g(n,s);if(c)return d(p(c,n,s));t[n.name]=s}}for(const r of e.requiredFields)if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function P(e,t){let i=t;return typeof t=="string"&&y(e)?i=parseFloat(t):t!=null&&w(e)&&typeof t!="string"&&(i=String(t)),I(i)}let o;function B(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(h(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function E(){return h(o)&&(o=await _(()=>import("./geometryEngineJSON.3d6e7890.js"),["assets/geometryEngineJSON.3d6e7890.js","assets/geometryEngineBase.82b25ca5.js","assets/geometryEngineJSON.f9e9a36f.js","assets/json.879c9adc.js"])),o}async function D(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await E()}export{d as a,j as f,B as g,A as m,D as w};
