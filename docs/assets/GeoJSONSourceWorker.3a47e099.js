import{c9 as g,s as _,dz as O,c7 as k,ca as $,c6 as C,bF as D,f as Q,a0 as P,r as F,L as G,v as q}from"./index.e3323316.js";import{t as Z,n as v,W as A,e as M,Q as z}from"./featureConversionUtils.aa6a0f2a.js";import{u as N}from"./FeatureStore.43ed693f.js";import{f as E,g as b}from"./QueryEngineResult.1712c305.js";import{Y as L}from"./QueryEngine.28fb8d79.js";import{T as B,L as W,O as J}from"./geojson.75ded1e1.js";import{o as U,a as V,i as Y}from"./clientSideDefaults.e88a70e3.js";import{w as H,m as w,f as T,a as I,g as x}from"./sourceUtils.38fccc57.js";import"./OptimizedGeometry.10f1da87.js";import"./OptimizedFeatureSet.0c30c73c.js";import"./aaBoundingRect.5a756f30.js";import"./PooledRBush.2a72c281.js";import"./quickselect.3948ea39.js";import"./utils.8f62ec91.js";import"./ClassBreaksDefinition.c1674261.js";import"./ItemCache.447dbe57.js";import"./WhereClause.37e2edb1.js";import"./projection.a8a5390b.js";import"./json.879c9adc.js";import"./normalizeUtils.12605981.js";import"./QueryEngineCapabilities.e56964e9.js";const K={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class Ee{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._fieldsIndex=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[];await this._checkProjection(e.spatialReference);let n=null;e.url&&(n=await this._fetch(t==null?void 0:t.signal));const a=B(n,{geometryType:e.geometryType}),o=e.fields||a.fields||[],u=e.hasZ!=null?e.hasZ:a.hasZ,d=a.geometryType,p=e.objectIdField||a.objectIdFieldName||"__OBJECTID",h=e.spatialReference||g;let i=e.timeInfo;o===a.fields&&a.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:a.unknownFields}});let l=o.find(r=>r.name===p);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1):(l={alias:p,name:p,type:a.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(l));const c={};for(const r of o){if(r.name==null&&(r.name=r.alias),r.alias==null&&(r.alias=r.name),!r.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:r});if(!O.jsonValues.includes(r.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${r.name}"`,{field:r});if(r.name!==l.name){const f=k(r);f!==void 0&&(c[r.name]=f)}}this._fieldsIndex=new $(o);const y=this._fieldsIndex.requiredFields.indexOf(l);if(y>-1&&this._fieldsIndex.requiredFields.splice(y,1),i){if(i.startTimeField){const r=this._fieldsIndex.get(i.startTimeField);r?(i.startTimeField=r.name,r.type="esriFieldTypeDate"):i.startTimeField=null}if(i.endTimeField){const r=this._fieldsIndex.get(i.endTimeField);r?(i.endTimeField=r.name,r.type="esriFieldTypeDate"):i.endTimeField=null}if(i.trackIdField){const r=this._fieldsIndex.get(i.trackIdField);r?i.trackIdField=r.name:(i.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:i}}))}i.startTimeField||i.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:i}}),i=null)}const S=d?U(d):null,m={warnings:s,featureErrors:[],layerDefinition:{...K,drawingInfo:S,templates:V(c),extent:null,geometryType:d,objectIdField:p,fields:o,hasZ:!!u,timeInfo:i}};this._queryEngine=new L({fields:o,geometryType:d,hasM:!1,hasZ:u,objectIdField:p,spatialReference:h,timeInfo:i,featureStore:new N({geometryType:d,hasM:!1,hasZ:u}),cacheSpatialQueries:!0}),this._createDefaultAttributes=Y(c,p);const j=await this._createFeatures(n);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,j);const R=this._normalizeFeatures(j,m.warnings,m.featureErrors);if(this._queryEngine.featureStore.addMany(R),m.layerDefinition.extent=this._queryEngine.fullExtent,m.layerDefinition.timeInfo){const{start:r,end:f}=this._queryEngine.timeExtent;m.layerDefinition.timeInfo.timeExtent=[r,f]}return m}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([H(t,s),E(e.adds,t),E(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._loadOptions.customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=C(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const n=this._normalizeFeatures(s);n&&this._queryEngine.featureStore.addMany(n)},s=>{this._queryEngine.featureStore.clear(),D(s)||Q.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent}}async _createFeatures(e){const{geometryType:t,hasZ:s,objectIdField:n}=this._queryEngine,a=W(e,{geometryType:t,hasZ:s,objectIdField:n});if(!P(this._queryEngine.spatialReference,g))for(const o of a)F(o.geometry)&&(o.geometry=Z(b(v(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),g,this._queryEngine.spatialReference)));return a}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,n=(await G(t,{responseType:"json",query:{...s},signal:e})).data;return await J(n),n}_normalizeFeatures(e,t,s){const{objectIdField:n}=this._queryEngine,a=[];for(const o of e){const u=this._createDefaultAttributes(),d=w(this._fieldsIndex,u,o.attributes,!0,t);d?s==null||s.push(d):(this._assignObjectId(u,o.attributes,!0),o.attributes=u,o.objectId=u[n],a.push(o))}return a}_applyEdits(e){const{adds:t,updates:s,deletes:n}=e,a={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t&&t.length&&this._applyAddEdits(a,t),s&&s.length&&this._applyUpdateEdits(a,s),n&&n.length){for(const o of n)a.deleteResults.push(T(o));this._queryEngine.featureStore.removeManyById(n)}return{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent,featureEditResults:a}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:n,hasM:a,hasZ:o,objectIdField:u,spatialReference:d,featureStore:p}=this._queryEngine,h=[];for(const i of t){if(i.geometry&&n!==q(i.geometry)){s.push(I("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),c=w(this._fieldsIndex,l,i.attributes);if(c)s.push(c);else{if(this._assignObjectId(l,i.attributes),i.attributes=l,i.uid!=null){const y=i.attributes[u];e.uidToObjectId[i.uid]=y}F(i.geometry)&&(i.geometry=b(x(i.geometry,d),i.geometry.spatialReference,d)),h.push(i),s.push(T(i.attributes[u]))}}p.addMany(A([],h,n,o,a,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:n,hasZ:a,objectIdField:o,spatialReference:u,featureStore:d}=this._queryEngine;for(const p of t){const{attributes:h,geometry:i}=p,l=h&&h[o];if(l==null){e.push(I(`Identifier field ${o} missing`));continue}if(!d.has(l)){e.push(I(`Feature with object id ${l} missing`));continue}const c=M(d.getFeature(l),s,a,n);if(F(i)){if(s!==q(i)){e.push(I("Incorrect geometry type."));continue}c.geometry=b(x(i,u),i.spatialReference,u)}if(h){const y=w(this._fieldsIndex,c.attributes,h);if(y){e.push(y);continue}}d.add(z(c,s,a,n,o)),e.push(T(l))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let n=Number.NEGATIVE_INFINITY;for(const a of t)a.objectId&&(n=Math.max(n,a.objectId));return n=Math.max(0,n)+1,()=>n++}_assignObjectId(e,t,s=!1){const n=this._queryEngine.objectIdField;e[n]=s&&n in t?t[n]:this._objectIdGenerator()}async _checkProjection(e){try{await E(g,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{Ee as default};
